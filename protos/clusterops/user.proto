syntax = "proto3";

package scow.clusterops;

// 所有操作都是幂等的（idempotent）
// 举例，如果一个用户已经被block，那么调用多次block
// user给出的效果和调用一次是一样的

message BlockUserInAccountRequest {
  string user_id = 1;
  string account_name = 2;
}

// NOT_FOUND: user is not found.
message BlockUserInAccountReply {}

message UnblockUserInAccountRequest {
  string user_id = 1;
  string account_name = 2;
}

// NOT_FOUND: user is not found.
message UnblockUserInAccountReply {}

message RemoveUserRequest {
  string user_id = 1;
  string account_name = 2;
}

// NOT_FOUND: user is not found.
message RemoveUserReply {}

message AddUserRequest {
  string user_id = 1;
  string account_name = 2;
}

// ALREADY_EXISTS: User already exists.
message AddUserReply {}

service UserService {
  rpc AddUser(AddUserRequest) returns (AddUserReply);
  rpc RemoveUser(RemoveUserRequest) returns (RemoveUserReply);
  rpc BlockUserInAccount(BlockUserInAccountRequest)
      returns (BlockUserInAccountReply);
  rpc UnblockUserInAccount(UnblockUserInAccountRequest)
      returns (UnblockUserInAccountReply);
}
