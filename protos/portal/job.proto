syntax = "proto3";

package scow.portal.job;

import "common/job.proto";
import "google/protobuf/timestamp.proto";

message GetRunningJobsRequest {
  string cluster = 1;
  string user_id = 2;
}

message GetRunningJobsReply { repeated common.job.RunningJob jobs = 1; }

message SubmitJobRequest {
  string cluster = 1;
  string user_id = 2;
  NewJobInfo job_info = 3;
  string script = 4;
  bool save = 5;
}

// UNAVAILABLE: if sbatch fails, the details is the stderr
message SubmitJobReply { uint64 job_id = 1; }

message NewJobInfo {
  string job_name = 1;
  string account = 2;
  optional string partition = 3;
  optional string qos = 4;
  uint32 node_count = 5;
  uint32 core_count = 6;
  // in minutes
  uint32 max_time = 7;
  string command = 8;
  string working_directory = 9;
  optional string comment = 10;
}

message GenerateJobScriptRequest { NewJobInfo job_info = 1; }

message GenerateJobScriptReply { string script = 1; }

message GetAccountsRequest {
  string cluster = 1;
  string user_id = 2;
}

message GetAccountsReply { repeated string accounts = 1; }

message GetSavedJobsRequest {
  string cluster = 1;
  string user_id = 2;
}

message SavedJob {
  string id = 1;
  string job_name = 2;
  google.protobuf.Timestamp submit_time = 3;
  optional string comment = 4;
}

message GetSavedJobsReply { repeated SavedJob results = 1; }

message GetSavedJobRequest {
  string cluster = 1;
  string user_id = 2;
  string id = 3;
}

message GetSavedJobReply { NewJobInfo job_info = 1; }

message CancelJobRequest {
  string cluster = 1;
  string user_id = 2;
  uint32 job_id = 3;
}

message CancelJobReply {}

message GetAllJobsInfoRequest {
  string cluster = 1;
  string user_id = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
}

message JobInfo {
  string job_id = 1;
  string name = 2;
  string account = 3;
  string partition = 4;
  string qos = 5;
  string state = 6;
  string working_dir = 7;
  string reason = 8;
  string elapsed = 9;
  string time_limit = 10;
  string submit_time = 11;
}

message GetAllJobsInfoReply { repeated JobInfo jobs = 1; }

service JobService {
  rpc GetRunningJobs(GetRunningJobsRequest) returns (GetRunningJobsReply);
  rpc GetAccounts(GetAccountsRequest) returns (GetAccountsReply);
  rpc GenerateJobScript(GenerateJobScriptRequest)
      returns (GenerateJobScriptReply);
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobReply);
  rpc GetSavedJobs(GetSavedJobsRequest) returns (GetSavedJobsReply);
  rpc GetSavedJob(GetSavedJobRequest) returns (GetSavedJobReply);
  rpc CancelJob(CancelJobRequest) returns (CancelJobReply);
  rpc GetAllJobsInfo(GetAllJobsInfoRequest) returns (GetAllJobsInfoReply);
}
